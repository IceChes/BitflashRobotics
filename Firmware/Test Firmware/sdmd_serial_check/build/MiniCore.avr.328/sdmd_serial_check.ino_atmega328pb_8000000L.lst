
C:\Users\icech\AppData\Local\arduino\sketches\2D1450CC8F4F52325FACC3E866BD6C95/sdmd_serial_check.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
../../../../crt1/gcrt1.S:65
   0:	0c 94 8a 00 	jmp	0x114	; 0x114 <__ctors_end>
../../../../crt1/gcrt1.S:67
   4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:68
   8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:69
   c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:70
  10:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:71
  14:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:72
  18:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:73
  1c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:74
  20:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:75
  24:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:76
  28:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:77
  2c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:78
  30:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:79
  34:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:80
  38:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:81
  3c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:82
  40:	0c 94 39 02 	jmp	0x472	; 0x472 <__vector_16>
../../../../crt1/gcrt1.S:83
  44:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:84
  48:	0c 94 a9 02 	jmp	0x552	; 0x552 <__vector_18>
../../../../crt1/gcrt1.S:85
  4c:	0c 94 83 02 	jmp	0x506	; 0x506 <__vector_19>
../../../../crt1/gcrt1.S:86
  50:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:87
  54:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:88
  58:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:89
  5c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:90
  60:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:91
  64:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:92
  68:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:93
  6c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:94
  70:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:95
  74:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:96
  78:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:97
  7c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:98
  80:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:99
  84:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:100
  88:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:101
  8c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:102
  90:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:103
  94:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:104
  98:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:105
  9c:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:106
  a0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:107
  a4:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:108
  a8:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:109
  ac:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>
../../../../crt1/gcrt1.S:110
  b0:	0c 94 b2 00 	jmp	0x164	; 0x164 <__bad_interrupt>

000000b4 <__trampolines_end>:
__trampolines_start():
  b4:	00 00       	nop
  b6:	00 00       	nop
  b8:	25 00       	.word	0x0025	; ????
  ba:	28 00       	.word	0x0028	; ????
  bc:	2b 00       	.word	0x002b	; ????
  be:	2e 00       	.word	0x002e	; ????

000000c0 <digital_pin_to_port_PGM>:
  c0:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  d0:	03 03 03 03 02 02 03 05 05 05 05                    ...........

000000db <digital_pin_to_bit_mask_PGM>:
  db:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  eb:	04 08 10 20 40 80 40 01 02 04 08                    ... @.@....

000000f6 <digital_pin_to_timer_PGM>:
  f6:	0a 0d 0e 09 00 03 02 00 00 04 05 08 00 00 00 00     ................
	...

00000112 <__ctors_start>:
__ctors_start():
 112:	4e 03       	fmul	r20, r22

00000114 <__ctors_end>:
__dtors_end():
../../../../crt1/gcrt1.S:230
 114:	11 24       	eor	r1, r1
../../../../crt1/gcrt1.S:231
 116:	1f be       	out	0x3f, r1	; 63
../../../../crt1/gcrt1.S:232
 118:	cf ef       	ldi	r28, 0xFF	; 255
../../../../crt1/gcrt1.S:241
 11a:	d8 e0       	ldi	r29, 0x08	; 8
../../../../crt1/gcrt1.S:242
 11c:	de bf       	out	0x3e, r29	; 62
../../../../crt1/gcrt1.S:244
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
 120:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
 122:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
 124:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
 126:	e6 e0       	ldi	r30, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
 128:	f7 e0       	ldi	r31, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
 12c:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
 12e:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
 130:	a2 31       	cpi	r26, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
 132:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
 136:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
 138:	a2 e1       	ldi	r26, 0x12	; 18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
 13a:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
 140:	a8 3b       	cpi	r26, 0xB8	; 184
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
 142:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>

00000146 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
 146:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
 148:	ca e8       	ldi	r28, 0x8A	; 138
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
 14a:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
 14c:	04 c0       	rjmp	.+8      	; 0x156 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
 14e:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
 150:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
 152:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
 156:	c9 38       	cpi	r28, 0x89	; 137
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
 158:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
 15a:	c9 f7       	brne	.-14     	; 0x14e <__do_global_ctors+0x8>
../../../../crt1/gcrt1.S:314
 15c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <main>
../../../../crt1/gcrt1.S:315
 160:	0c 94 81 03 	jmp	0x702	; 0x702 <_exit>

00000164 <__bad_interrupt>:
__vector_38():
../../../../crt1/gcrt1.S:209
 164:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000168 <digitalWrite>:
digitalWrite():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:189
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  uint8_t timer = digitalPinToTimer(pin);
 168:	28 2f       	mov	r18, r24
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	f9 01       	movw	r30, r18
 16e:	ea 50       	subi	r30, 0x0A	; 10
 170:	ff 4f       	sbci	r31, 0xFF	; 255
 172:	94 91       	lpm	r25, Z
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
 174:	f9 01       	movw	r30, r18
 176:	e5 52       	subi	r30, 0x25	; 37
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	84 91       	lpm	r24, Z
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
 17c:	20 54       	subi	r18, 0x40	; 64
 17e:	3f 4f       	sbci	r19, 0xFF	; 255
 180:	f9 01       	movw	r30, r18
 182:	24 91       	lpm	r18, Z
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 184:	22 23       	and	r18, r18
 186:	09 f4       	brne	.+2      	; 0x18a <digitalWrite+0x22>
 188:	2e c0       	rjmp	.+92     	; 0x1e6 <digitalWrite+0x7e>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 18a:	99 23       	and	r25, r25
 18c:	d9 f0       	breq	.+54     	; 0x1c4 <digitalWrite+0x5c>
turnOffPWM():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
 18e:	92 50       	subi	r25, 0x02	; 2
 190:	9d 30       	cpi	r25, 0x0D	; 13
 192:	c0 f4       	brcc	.+48     	; 0x1c4 <digitalWrite+0x5c>
 194:	e9 2f       	mov	r30, r25
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	e0 53       	subi	r30, 0x30	; 48
 19a:	ff 4f       	sbci	r31, 0xFF	; 255
 19c:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__tablejump2__>
 1a0:	16 01       	movw	r2, r12
 1a2:	1a 01       	movw	r2, r20
 1a4:	dd 00       	.word	0x00dd	; ????
 1a6:	f4 00       	.word	0x00f4	; ????
 1a8:	e2 00       	.word	0x00e2	; ????
 1aa:	e2 00       	.word	0x00e2	; ????
 1ac:	f8 00       	.word	0x00f8	; ????
 1ae:	fe 00       	.word	0x00fe	; ????
 1b0:	02 01       	movw	r0, r4
 1b2:	08 01       	movw	r0, r16
 1b4:	e2 00       	.word	0x00e2	; ????
 1b6:	0c 01       	movw	r0, r24
 1b8:	12 01       	movw	r2, r4
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
 1ba:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 1be:	9f 77       	andi	r25, 0x7F	; 127
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 1c0:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
digitalWrite():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:200

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  out = portOutputRegister(port);
 1c4:	e2 2f       	mov	r30, r18
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	ee 0f       	add	r30, r30
 1ca:	ff 1f       	adc	r31, r31
 1cc:	ec 54       	subi	r30, 0x4C	; 76
 1ce:	ff 4f       	sbci	r31, 0xFF	; 255
 1d0:	a5 91       	lpm	r26, Z+
 1d2:	b4 91       	lpm	r27, Z
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 1d4:	9f b7       	in	r25, 0x3f	; 63
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 1d6:	f8 94       	cli
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 1d8:	ec 91       	ld	r30, X
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 1da:	61 11       	cpse	r22, r1
 1dc:	2e c0       	rjmp	.+92     	; 0x23a <digitalWrite+0xd2>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 1de:	80 95       	com	r24
 1e0:	8e 23       	and	r24, r30
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 1e2:	8c 93       	st	X, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 1e4:	9f bf       	out	0x3f, r25	; 63
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
 1e6:	08 95       	ret
turnOffPWM():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
 1e8:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 1ec:	9f 7d       	andi	r25, 0xDF	; 223
 1ee:	e8 cf       	rjmp	.-48     	; 0x1c0 <digitalWrite+0x58>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
 1f0:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 1f4:	9f 77       	andi	r25, 0x7F	; 127
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
 1f6:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 1fa:	e4 cf       	rjmp	.-56     	; 0x1c4 <digitalWrite+0x5c>
 1fc:	90 91 b0 00 	lds	r25, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 200:	9f 7d       	andi	r25, 0xDF	; 223
 202:	f9 cf       	rjmp	.-14     	; 0x1f6 <digitalWrite+0x8e>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
 204:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
 208:	9f 77       	andi	r25, 0x7F	; 127
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
 20a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
 20e:	da cf       	rjmp	.-76     	; 0x1c4 <digitalWrite+0x5c>
 210:	90 91 90 00 	lds	r25, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
 214:	9f 7d       	andi	r25, 0xDF	; 223
 216:	f9 cf       	rjmp	.-14     	; 0x20a <digitalWrite+0xa2>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:133
    #endif

    // Timer4
    #if defined(TCCR4A) && defined(COM4A1)
      case TIMER4A:
        TCCR4A &= ~_BV(COM4A1);
 218:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 21c:	9f 77       	andi	r25, 0x7F	; 127
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:138
        break;
    #endif
    #if defined(TCCR4A) && defined(COM4B1)
      case  TIMER4B:
        TCCR4A &= ~_BV(COM4B1);
 21e:	90 93 a0 00 	sts	0x00A0, r25	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 222:	d0 cf       	rjmp	.-96     	; 0x1c4 <digitalWrite+0x5c>
 224:	90 91 a0 00 	lds	r25, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 228:	9f 7d       	andi	r25, 0xDF	; 223
 22a:	f9 cf       	rjmp	.-14     	; 0x21e <digitalWrite+0xb6>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
 22c:	94 b5       	in	r25, 0x24	; 36
 22e:	9f 77       	andi	r25, 0x7F	; 127
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
 230:	94 bd       	out	0x24, r25	; 36
 232:	c8 cf       	rjmp	.-112    	; 0x1c4 <digitalWrite+0x5c>
 234:	94 b5       	in	r25, 0x24	; 36
 236:	9f 7d       	andi	r25, 0xDF	; 223
 238:	fb cf       	rjmp	.-10     	; 0x230 <digitalWrite+0xc8>
digitalWrite():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 23a:	8e 2b       	or	r24, r30
 23c:	d2 cf       	rjmp	.-92     	; 0x1e2 <digitalWrite+0x7a>

0000023e <Print::write(unsigned char const*, unsigned int)>:
write():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:35

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23e:	af 92       	push	r10
 240:	bf 92       	push	r11
 242:	cf 92       	push	r12
 244:	df 92       	push	r13
 246:	ef 92       	push	r14
 248:	ff 92       	push	r15
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	6c 01       	movw	r12, r24
 254:	7b 01       	movw	r14, r22
 256:	8b 01       	movw	r16, r22
 258:	04 0f       	add	r16, r20
 25a:	15 1f       	adc	r17, r21
 25c:	eb 01       	movw	r28, r22
 25e:	5e 01       	movw	r10, r28
 260:	ae 18       	sub	r10, r14
 262:	bf 08       	sbc	r11, r15
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:37
  size_t n = 0;
  while (size--) {
 264:	c0 17       	cp	r28, r16
 266:	d1 07       	cpc	r29, r17
 268:	59 f0       	breq	.+22     	; 0x280 <Print::write(unsigned char const*, unsigned int)+0x42>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:38
    if (write(*buffer++)) n++;
 26a:	69 91       	ld	r22, Y+
 26c:	d6 01       	movw	r26, r12
 26e:	ed 91       	ld	r30, X+
 270:	fc 91       	ld	r31, X
 272:	01 90       	ld	r0, Z+
 274:	f0 81       	ld	r31, Z
 276:	e0 2d       	mov	r30, r0
 278:	c6 01       	movw	r24, r12
 27a:	09 95       	icall
 27c:	89 2b       	or	r24, r25
 27e:	79 f7       	brne	.-34     	; 0x25e <Print::write(unsigned char const*, unsigned int)+0x20>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.cpp:42
    else break;
  }
  return n;
}
 280:	c5 01       	movw	r24, r10
 282:	df 91       	pop	r29
 284:	cf 91       	pop	r28
 286:	1f 91       	pop	r17
 288:	0f 91       	pop	r16
 28a:	ff 90       	pop	r15
 28c:	ef 90       	pop	r14
 28e:	df 90       	pop	r13
 290:	cf 90       	pop	r12
 292:	bf 90       	pop	r11
 294:	af 90       	pop	r10
 296:	08 95       	ret

00000298 <HardwareSerial::availableForWrite()>:
availableForWrite():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:195
{
  tx_buffer_index_t head;
  tx_buffer_index_t tail;

  TX_BUFFER_ATOMIC {
    head = _tx_buffer_head;
 298:	fc 01       	movw	r30, r24
 29a:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:196
    tail = _tx_buffer_tail;
 29c:	44 8d       	ldd	r20, Z+28	; 0x1c
 29e:	25 2f       	mov	r18, r21
 2a0:	30 e0       	ldi	r19, 0x00	; 0
 2a2:	84 2f       	mov	r24, r20
 2a4:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:198
  }
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
 2a6:	82 1b       	sub	r24, r18
 2a8:	93 0b       	sbc	r25, r19
 2aa:	54 17       	cp	r21, r20
 2ac:	10 f0       	brcs	.+4      	; 0x2b2 <HardwareSerial::availableForWrite()+0x1a>
 2ae:	cf 96       	adiw	r24, 0x3f	; 63
 2b0:	08 95       	ret
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:199
  return tail - head - 1;
 2b2:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:200
}
 2b4:	08 95       	ret

000002b6 <HardwareSerial::read()>:
read():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:178
    return _rx_buffer[_rx_buffer_tail];
  }
}

int HardwareSerial::read(void)
{
 2b6:	fc 01       	movw	r30, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:180
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
 2b8:	91 8d       	ldd	r25, Z+25	; 0x19
 2ba:	82 8d       	ldd	r24, Z+26	; 0x1a
 2bc:	98 17       	cp	r25, r24
 2be:	61 f0       	breq	.+24     	; 0x2d8 <HardwareSerial::read()+0x22>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:183
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
 2c0:	a2 8d       	ldd	r26, Z+26	; 0x1a
 2c2:	ae 0f       	add	r26, r30
 2c4:	bf 2f       	mov	r27, r31
 2c6:	b1 1d       	adc	r27, r1
 2c8:	5d 96       	adiw	r26, 0x1d	; 29
 2ca:	8c 91       	ld	r24, X
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:184
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
 2cc:	92 8d       	ldd	r25, Z+26	; 0x1a
 2ce:	9f 5f       	subi	r25, 0xFF	; 255
 2d0:	9f 73       	andi	r25, 0x3F	; 63
 2d2:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:185
    return c;
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	08 95       	ret
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:181

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2d8:	8f ef       	ldi	r24, 0xFF	; 255
 2da:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
 2dc:	08 95       	ret

000002de <HardwareSerial::peek()>:
peek():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:169
{
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
}

int HardwareSerial::peek(void)
{
 2de:	fc 01       	movw	r30, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:170
  if (_rx_buffer_head == _rx_buffer_tail) {
 2e0:	91 8d       	ldd	r25, Z+25	; 0x19
 2e2:	82 8d       	ldd	r24, Z+26	; 0x1a
 2e4:	98 17       	cp	r25, r24
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <HardwareSerial::peek()+0x16>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:173
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
 2e8:	82 8d       	ldd	r24, Z+26	; 0x1a
 2ea:	e8 0f       	add	r30, r24
 2ec:	f1 1d       	adc	r31, r1
 2ee:	85 8d       	ldd	r24, Z+29	; 0x1d
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	08 95       	ret
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:171
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:175
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
 2f8:	08 95       	ret

000002fa <HardwareSerial::available()>:
available():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:164
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
 2fa:	fc 01       	movw	r30, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:165
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
 2fc:	91 8d       	ldd	r25, Z+25	; 0x19
 2fe:	22 8d       	ldd	r18, Z+26	; 0x1a
 300:	89 2f       	mov	r24, r25
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	80 5c       	subi	r24, 0xC0	; 192
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	82 1b       	sub	r24, r18
 30a:	91 09       	sbc	r25, r1
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:166
}
 30c:	8f 73       	andi	r24, 0x3F	; 63
 30e:	99 27       	eor	r25, r25
 310:	08 95       	ret

00000312 <Serial0_available()>:
Serial0_available():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
 312:	82 e1       	ldi	r24, 0x12	; 18
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	0e 94 7d 01 	call	0x2fa	; 0x2fa <HardwareSerial::available()>
 31a:	21 e0       	ldi	r18, 0x01	; 1
 31c:	89 2b       	or	r24, r25
 31e:	09 f4       	brne	.+2      	; 0x322 <Serial0_available()+0x10>
 320:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
 322:	82 2f       	mov	r24, r18
 324:	08 95       	ret

00000326 <HardwareSerial::_tx_udr_empty_irq()>:
_tx_udr_empty_irq():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:90
#endif

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
 326:	fc 01       	movw	r30, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:93
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
 328:	a4 8d       	ldd	r26, Z+28	; 0x1c
 32a:	a8 0f       	add	r26, r24
 32c:	b9 2f       	mov	r27, r25
 32e:	b1 1d       	adc	r27, r1
 330:	a3 5a       	subi	r26, 0xA3	; 163
 332:	bf 4f       	sbci	r27, 0xFF	; 255
 334:	2c 91       	ld	r18, X
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:94
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
 336:	84 8d       	ldd	r24, Z+28	; 0x1c
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	8f 73       	andi	r24, 0x3F	; 63
 33e:	99 27       	eor	r25, r25
 340:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:96

  *_udr = c;
 342:	a6 89       	ldd	r26, Z+22	; 0x16
 344:	b7 89       	ldd	r27, Z+23	; 0x17
 346:	2c 93       	st	X, r18
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:104
  // location". This makes sure flush() won't return until the bytes
  // actually got written. Other r/w bits are preserved, and zeroes
  // written to the rest.

  #ifdef MPCM0
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 348:	a0 89       	ldd	r26, Z+16	; 0x10
 34a:	b1 89       	ldd	r27, Z+17	; 0x11
 34c:	8c 91       	ld	r24, X
 34e:	83 70       	andi	r24, 0x03	; 3
 350:	80 64       	ori	r24, 0x40	; 64
 352:	8c 93       	st	X, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:109
  #else
    *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
  #endif

  if (_tx_buffer_head == _tx_buffer_tail) {
 354:	93 8d       	ldd	r25, Z+27	; 0x1b
 356:	84 8d       	ldd	r24, Z+28	; 0x1c
 358:	98 13       	cpse	r25, r24
 35a:	06 c0       	rjmp	.+12     	; 0x368 <HardwareSerial::_tx_udr_empty_irq()+0x42>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:111
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
 35c:	02 88       	ldd	r0, Z+18	; 0x12
 35e:	f3 89       	ldd	r31, Z+19	; 0x13
 360:	e0 2d       	mov	r30, r0
 362:	80 81       	ld	r24, Z
 364:	8f 7d       	andi	r24, 0xDF	; 223
 366:	80 83       	st	Z, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:113
  }
}
 368:	08 95       	ret

0000036a <HardwareSerial::write(unsigned char)>:
write():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:223
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
 36a:	ef 92       	push	r14
 36c:	ff 92       	push	r15
 36e:	0f 93       	push	r16
 370:	1f 93       	push	r17
 372:	cf 93       	push	r28
 374:	df 93       	push	r29
 376:	ec 01       	movw	r28, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:224
  _written = true;
 378:	81 e0       	ldi	r24, 0x01	; 1
 37a:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:229
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
 37c:	9b 8d       	ldd	r25, Y+27	; 0x1b
 37e:	8c 8d       	ldd	r24, Y+28	; 0x1c
 380:	98 13       	cpse	r25, r24
 382:	1a c0       	rjmp	.+52     	; 0x3b8 <HardwareSerial::write(unsigned char)+0x4e>
 384:	e8 89       	ldd	r30, Y+16	; 0x10
 386:	f9 89       	ldd	r31, Y+17	; 0x11
 388:	80 81       	ld	r24, Z
 38a:	85 ff       	sbrs	r24, 5
 38c:	15 c0       	rjmp	.+42     	; 0x3b8 <HardwareSerial::write(unsigned char)+0x4e>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:238
    // So writing UDR must happen first.
    // Writing UDR and clearing TC must be done atomically, otherwise
    // interrupts might delay the TXC clear so the byte written to UDR
    // is transmitted (setting TXC) before clearing TXC. Then TXC will
    // be cleared when no bytes are left, causing flush() to hang
    ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 38e:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\icech\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 390:	f8 94       	cli
write():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:239
      *_udr = c;
 392:	ee 89       	ldd	r30, Y+22	; 0x16
 394:	ff 89       	ldd	r31, Y+23	; 0x17
 396:	60 83       	st	Z, r22
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:241
      #ifdef MPCM0
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << MPCM0))) | (1 << TXC0);
 398:	e8 89       	ldd	r30, Y+16	; 0x10
 39a:	f9 89       	ldd	r31, Y+17	; 0x11
 39c:	80 81       	ld	r24, Z
 39e:	83 70       	andi	r24, 0x03	; 3
 3a0:	80 64       	ori	r24, 0x40	; 64
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
    _tx_buffer_head = i;
    *_ucsrb |= _BV(UDRIE0);
 3a2:	80 83       	st	Z, r24
__iRestore():
c:\users\icech\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:70
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 3a4:	9f bf       	out	0x3f, r25	; 63
write():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:275
  }
  
  return 1;
}
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	0f 91       	pop	r16
 3b2:	ff 90       	pop	r15
 3b4:	ef 90       	pop	r14
 3b6:	08 95       	ret
 3b8:	f6 2e       	mov	r15, r22
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:248
        *_ucsra = ((*_ucsra) & ((1 << U2X0) | (1 << TXC0)));
      #endif
    }
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
 3ba:	0b 8d       	ldd	r16, Y+27	; 0x1b
 3bc:	10 e0       	ldi	r17, 0x00	; 0
 3be:	0f 5f       	subi	r16, 0xFF	; 255
 3c0:	1f 4f       	sbci	r17, 0xFF	; 255
 3c2:	0f 73       	andi	r16, 0x3F	; 63
 3c4:	11 27       	eor	r17, r17
 3c6:	e0 2e       	mov	r14, r16
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:252

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
 3c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
 3ca:	8e 11       	cpse	r24, r14
 3cc:	0c c0       	rjmp	.+24     	; 0x3e6 <HardwareSerial::write(unsigned char)+0x7c>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:253
    if (bit_is_clear(SREG, SREG_I)) {
 3ce:	0f b6       	in	r0, 0x3f	; 63
 3d0:	07 fc       	sbrc	r0, 7
 3d2:	fa cf       	rjmp	.-12     	; 0x3c8 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:258
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
 3d4:	e8 89       	ldd	r30, Y+16	; 0x10
 3d6:	f9 89       	ldd	r31, Y+17	; 0x11
 3d8:	80 81       	ld	r24, Z
 3da:	85 ff       	sbrs	r24, 5
 3dc:	f5 cf       	rjmp	.-22     	; 0x3c8 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:259
        _tx_udr_empty_irq();
 3de:	ce 01       	movw	r24, r28
 3e0:	0e 94 93 01 	call	0x326	; 0x326 <HardwareSerial::_tx_udr_empty_irq()>
 3e4:	f1 cf       	rjmp	.-30     	; 0x3c8 <HardwareSerial::write(unsigned char)+0x5e>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:265
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
 3e6:	eb 8d       	ldd	r30, Y+27	; 0x1b
 3e8:	ec 0f       	add	r30, r28
 3ea:	fd 2f       	mov	r31, r29
 3ec:	f1 1d       	adc	r31, r1
 3ee:	e3 5a       	subi	r30, 0xA3	; 163
 3f0:	ff 4f       	sbci	r31, 0xFF	; 255
 3f2:	f0 82       	st	Z, r15
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:269
  // make atomic to prevent execution of ISR between setting the
  // head pointer and setting the interrupt flag resulting in buffer
  // retransmission
  ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 3f4:	9f b7       	in	r25, 0x3f	; 63
__iCliRetVal():
c:\users\icech\appdata\local\arduino15\packages\arduino\tools\avr-gcc\7.3.0-atmel3.6.1-arduino7\avr\include\util/atomic.h:50
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 3f6:	f8 94       	cli
write():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:270
    _tx_buffer_head = i;
 3f8:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:271
    *_ucsrb |= _BV(UDRIE0);
 3fa:	ea 89       	ldd	r30, Y+18	; 0x12
 3fc:	fb 89       	ldd	r31, Y+19	; 0x13
 3fe:	80 81       	ld	r24, Z
 400:	80 62       	ori	r24, 0x20	; 32
 402:	cf cf       	rjmp	.-98     	; 0x3a2 <HardwareSerial::write(unsigned char)+0x38>

00000404 <HardwareSerial::flush()>:
flush():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:203
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
 404:	cf 93       	push	r28
 406:	df 93       	push	r29
 408:	ec 01       	movw	r28, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:207
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
 40a:	88 8d       	ldd	r24, Y+24	; 0x18
 40c:	88 23       	and	r24, r24
 40e:	b9 f0       	breq	.+46     	; 0x43e <HardwareSerial::flush()+0x3a>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:210
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
 410:	aa 89       	ldd	r26, Y+18	; 0x12
 412:	bb 89       	ldd	r27, Y+19	; 0x13
 414:	e8 89       	ldd	r30, Y+16	; 0x10
 416:	f9 89       	ldd	r31, Y+17	; 0x11
 418:	8c 91       	ld	r24, X
 41a:	85 fd       	sbrc	r24, 5
 41c:	03 c0       	rjmp	.+6      	; 0x424 <HardwareSerial::flush()+0x20>
 41e:	80 81       	ld	r24, Z
 420:	86 fd       	sbrc	r24, 6
 422:	0d c0       	rjmp	.+26     	; 0x43e <HardwareSerial::flush()+0x3a>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:211
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	07 fc       	sbrc	r0, 7
 428:	f7 cf       	rjmp	.-18     	; 0x418 <HardwareSerial::flush()+0x14>
 42a:	8c 91       	ld	r24, X
 42c:	85 ff       	sbrs	r24, 5
 42e:	f2 cf       	rjmp	.-28     	; 0x414 <HardwareSerial::flush()+0x10>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:215
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
 430:	80 81       	ld	r24, Z
 432:	85 ff       	sbrs	r24, 5
 434:	ed cf       	rjmp	.-38     	; 0x410 <HardwareSerial::flush()+0xc>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:216
        _tx_udr_empty_irq();
 436:	ce 01       	movw	r24, r28
 438:	0e 94 93 01 	call	0x326	; 0x326 <HardwareSerial::_tx_udr_empty_irq()>
 43c:	e9 cf       	rjmp	.-46     	; 0x410 <HardwareSerial::flush()+0xc>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:220
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
 43e:	df 91       	pop	r29
 440:	cf 91       	pop	r28
 442:	08 95       	ret

00000444 <serialEventRun()>:
serialEventRun():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:67
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	89 2b       	or	r24, r25
 44a:	29 f0       	breq	.+10     	; 0x456 <serialEventRun()+0x12>
 44c:	0e 94 89 01 	call	0x312	; 0x312 <Serial0_available()>
 450:	81 11       	cpse	r24, r1
 452:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:70
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
 456:	80 e0       	ldi	r24, 0x00	; 0
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	89 2b       	or	r24, r25
 45c:	49 f0       	breq	.+18     	; 0x470 <serialEventRun()+0x2c>
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	89 2b       	or	r24, r25
 464:	29 f0       	breq	.+10     	; 0x470 <serialEventRun()+0x2c>
 466:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 46a:	81 11       	cpse	r24, r1
 46c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:78
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
 470:	08 95       	ret

00000472 <__vector_16>:
__vector_16():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 472:	1f 92       	push	r1
 474:	0f 92       	push	r0
 476:	0f b6       	in	r0, 0x3f	; 63
 478:	0f 92       	push	r0
 47a:	11 24       	eor	r1, r1
 47c:	2f 93       	push	r18
 47e:	3f 93       	push	r19
 480:	8f 93       	push	r24
 482:	9f 93       	push	r25
 484:	af 93       	push	r26
 486:	bf 93       	push	r27
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
 488:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <timer0_millis>
 48c:	90 91 b5 01 	lds	r25, 0x01B5	; 0x8001b5 <timer0_millis+0x1>
 490:	a0 91 b6 01 	lds	r26, 0x01B6	; 0x8001b6 <timer0_millis+0x2>
 494:	b0 91 b7 01 	lds	r27, 0x01B7	; 0x8001b7 <timer0_millis+0x3>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
 498:	30 91 b3 01 	lds	r19, 0x01B3	; 0x8001b3 <timer0_fract>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
 49c:	26 e0       	ldi	r18, 0x06	; 6
 49e:	23 0f       	add	r18, r19
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
 4a0:	2d 37       	cpi	r18, 0x7D	; 125
 4a2:	68 f1       	brcs	.+90     	; 0x4fe <__vector_16+0x8c>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
 4a4:	29 e8       	ldi	r18, 0x89	; 137
 4a6:	23 0f       	add	r18, r19
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
 4a8:	03 96       	adiw	r24, 0x03	; 3
 4aa:	a1 1d       	adc	r26, r1
 4ac:	b1 1d       	adc	r27, r1
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
 4ae:	20 93 b3 01 	sts	0x01B3, r18	; 0x8001b3 <timer0_fract>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
 4b2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <timer0_millis>
 4b6:	90 93 b5 01 	sts	0x01B5, r25	; 0x8001b5 <timer0_millis+0x1>
 4ba:	a0 93 b6 01 	sts	0x01B6, r26	; 0x8001b6 <timer0_millis+0x2>
 4be:	b0 93 b7 01 	sts	0x01B7, r27	; 0x8001b7 <timer0_millis+0x3>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
 4c2:	80 91 af 01 	lds	r24, 0x01AF	; 0x8001af <timer0_overflow_count>
 4c6:	90 91 b0 01 	lds	r25, 0x01B0	; 0x8001b0 <timer0_overflow_count+0x1>
 4ca:	a0 91 b1 01 	lds	r26, 0x01B1	; 0x8001b1 <timer0_overflow_count+0x2>
 4ce:	b0 91 b2 01 	lds	r27, 0x01B2	; 0x8001b2 <timer0_overflow_count+0x3>
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	a1 1d       	adc	r26, r1
 4d6:	b1 1d       	adc	r27, r1
 4d8:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <timer0_overflow_count>
 4dc:	90 93 b0 01 	sts	0x01B0, r25	; 0x8001b0 <timer0_overflow_count+0x1>
 4e0:	a0 93 b1 01 	sts	0x01B1, r26	; 0x8001b1 <timer0_overflow_count+0x2>
 4e4:	b0 93 b2 01 	sts	0x01B2, r27	; 0x8001b2 <timer0_overflow_count+0x3>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	3f 91       	pop	r19
 4f2:	2f 91       	pop	r18
 4f4:	0f 90       	pop	r0
 4f6:	0f be       	out	0x3f, r0	; 63
 4f8:	0f 90       	pop	r0
 4fa:	1f 90       	pop	r1
 4fc:	18 95       	reti
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
 4fe:	02 96       	adiw	r24, 0x02	; 2
 500:	a1 1d       	adc	r26, r1
 502:	b1 1d       	adc	r27, r1
 504:	d4 cf       	rjmp	.-88     	; 0x4ae <__vector_16+0x3c>

00000506 <__vector_19>:
__vector_19():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
 506:	1f 92       	push	r1
 508:	0f 92       	push	r0
 50a:	0f b6       	in	r0, 0x3f	; 63
 50c:	0f 92       	push	r0
 50e:	11 24       	eor	r1, r1
 510:	2f 93       	push	r18
 512:	3f 93       	push	r19
 514:	4f 93       	push	r20
 516:	5f 93       	push	r21
 518:	6f 93       	push	r22
 51a:	7f 93       	push	r23
 51c:	8f 93       	push	r24
 51e:	9f 93       	push	r25
 520:	af 93       	push	r26
 522:	bf 93       	push	r27
 524:	ef 93       	push	r30
 526:	ff 93       	push	r31
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
 528:	82 e1       	ldi	r24, 0x12	; 18
 52a:	91 e0       	ldi	r25, 0x01	; 1
 52c:	0e 94 93 01 	call	0x326	; 0x326 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
 530:	ff 91       	pop	r31
 532:	ef 91       	pop	r30
 534:	bf 91       	pop	r27
 536:	af 91       	pop	r26
 538:	9f 91       	pop	r25
 53a:	8f 91       	pop	r24
 53c:	7f 91       	pop	r23
 53e:	6f 91       	pop	r22
 540:	5f 91       	pop	r21
 542:	4f 91       	pop	r20
 544:	3f 91       	pop	r19
 546:	2f 91       	pop	r18
 548:	0f 90       	pop	r0
 54a:	0f be       	out	0x3f, r0	; 63
 54c:	0f 90       	pop	r0
 54e:	1f 90       	pop	r1
 550:	18 95       	reti

00000552 <__vector_18>:
__vector_18():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RX_vect)
  ISR(USART_RX_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
 552:	1f 92       	push	r1
 554:	0f 92       	push	r0
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	0f 92       	push	r0
 55a:	11 24       	eor	r1, r1
 55c:	2f 93       	push	r18
 55e:	8f 93       	push	r24
 560:	9f 93       	push	r25
 562:	ef 93       	push	r30
 564:	ff 93       	push	r31
_rx_complete_irq():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:100

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
 566:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <__data_end+0x10>
 56a:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <__data_end+0x11>
 56e:	80 81       	ld	r24, Z
 570:	e0 91 28 01 	lds	r30, 0x0128	; 0x800128 <__data_end+0x16>
 574:	f0 91 29 01 	lds	r31, 0x0129	; 0x800129 <__data_end+0x17>
 578:	82 fd       	sbrc	r24, 2
 57a:	1b c0       	rjmp	.+54     	; 0x5b2 <__vector_18+0x60>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:103
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
 57c:	90 81       	ld	r25, Z
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:104
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
 57e:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <__data_end+0x19>
 582:	8f 5f       	subi	r24, 0xFF	; 255
 584:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:110

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
 586:	20 91 2c 01 	lds	r18, 0x012C	; 0x80012c <__data_end+0x1a>
 58a:	82 17       	cp	r24, r18
 58c:	41 f0       	breq	.+16     	; 0x59e <__vector_18+0x4c>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:111
      _rx_buffer[_rx_buffer_head] = c;
 58e:	e0 91 2b 01 	lds	r30, 0x012B	; 0x80012b <__data_end+0x19>
 592:	f0 e0       	ldi	r31, 0x00	; 0
 594:	ee 5e       	subi	r30, 0xEE	; 238
 596:	fe 4f       	sbci	r31, 0xFE	; 254
 598:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:112
      _rx_buffer_head = i;
 59a:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <__data_end+0x19>
__vector_18():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
 59e:	ff 91       	pop	r31
 5a0:	ef 91       	pop	r30
 5a2:	9f 91       	pop	r25
 5a4:	8f 91       	pop	r24
 5a6:	2f 91       	pop	r18
 5a8:	0f 90       	pop	r0
 5aa:	0f be       	out	0x3f, r0	; 63
 5ac:	0f 90       	pop	r0
 5ae:	1f 90       	pop	r1
 5b0:	18 95       	reti
_rx_complete_irq():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:116
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
 5b2:	80 81       	ld	r24, Z
 5b4:	f4 cf       	rjmp	.-24     	; 0x59e <__vector_18+0x4c>

000005b6 <main>:
init():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 5b6:	78 94       	sei
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
 5b8:	84 b5       	in	r24, 0x24	; 36
 5ba:	83 60       	ori	r24, 0x03	; 3
 5bc:	84 bd       	out	0x24, r24	; 36
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
 5be:	85 b5       	in	r24, 0x25	; 37
 5c0:	83 60       	ori	r24, 0x03	; 3
 5c2:	85 bd       	out	0x25, r24	; 37
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
 5c4:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
 5c8:	81 60       	ori	r24, 0x01	; 1
 5ca:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 5ce:	92 e0       	ldi	r25, 0x02	; 2
 5d0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
 5d4:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 5d8:	81 60       	ori	r24, 0x01	; 1
 5da:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 5de:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 5e2:	81 60       	ori	r24, 0x01	; 1
 5e4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
 5e8:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
 5ec:	84 60       	ori	r24, 0x04	; 4
 5ee:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7f80b1>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
 5f2:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
 5f6:	81 60       	ori	r24, 0x01	; 1
 5f8:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
 5fc:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
 600:	83 60       	ori	r24, 0x03	; 3
 602:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f8091>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
 606:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
 60a:	81 60       	ori	r24, 0x01	; 1
 60c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f8090>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1038
  TCCR4B |= _BV(CS42) | _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
  TCCR4D |= _BV(WGM40);                        // Put timer 4 in phase- and frequency-correct PWM mode
  TCCR4A |= _BV(PWM4A);                        // Enable PWM mode for comparator OCR4A
  TCCR4C |= _BV(PWM4D);                        // Enable PWM mode for comparator OCR4D
#elif defined(TCCR4B) && defined(CS41) && defined(WGM40)
  TCCR4B |= _BV(CS41) | _BV(CS40); // Set timer 4 prescale factor to 64
 610:	80 91 a1 00 	lds	r24, 0x00A1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
 614:	83 60       	ori	r24, 0x03	; 3
 616:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7f80a1>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1039
  TCCR4A |= _BV(WGM40);            // Put timer 4 in 8-bit phase correct pwm mode
 61a:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
 61e:	81 60       	ori	r24, 0x01	; 1
 620:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7f80a0>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1052
#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 8000000 // 8 MHz / 64 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADEN);
 624:	86 e8       	ldi	r24, 0x86	; 134
 626:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
 62a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
begin():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:121

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
 62e:	e0 91 22 01 	lds	r30, 0x0122	; 0x800122 <__data_end+0x10>
 632:	f0 91 23 01 	lds	r31, 0x0123	; 0x800123 <__data_end+0x11>
 636:	90 83       	st	Z, r25
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:135
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 638:	e0 91 1e 01 	lds	r30, 0x011E	; 0x80011e <__data_end+0xc>
 63c:	f0 91 1f 01 	lds	r31, 0x011F	; 0x80011f <__data_end+0xd>
 640:	10 82       	st	Z, r1
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:136
  *_ubrrl = baud_setting;
 642:	e0 91 20 01 	lds	r30, 0x0120	; 0x800120 <__data_end+0xe>
 646:	f0 91 21 01 	lds	r31, 0x0121	; 0x800121 <__data_end+0xf>
 64a:	87 e6       	ldi	r24, 0x67	; 103
 64c:	80 83       	st	Z, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:138

  _written = false;
 64e:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <__data_end+0x18>
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:146
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
 652:	e0 91 26 01 	lds	r30, 0x0126	; 0x800126 <__data_end+0x14>
 656:	f0 91 27 01 	lds	r31, 0x0127	; 0x800127 <__data_end+0x15>
 65a:	86 e0       	ldi	r24, 0x06	; 6
 65c:	80 83       	st	Z, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:148
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
 65e:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end+0x12>
 662:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <__data_end+0x13>
 666:	80 81       	ld	r24, Z
 668:	88 69       	ori	r24, 0x98	; 152
 66a:	80 83       	st	Z, r24
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial.cpp:149
  *_ucsrb &= ~_BV(UDRIE0);
 66c:	e0 91 24 01 	lds	r30, 0x0124	; 0x800124 <__data_end+0x12>
 670:	f0 91 25 01 	lds	r31, 0x0125	; 0x800125 <__data_end+0x13>
 674:	80 81       	ld	r24, Z
 676:	8f 7d       	andi	r24, 0xDF	; 223
 678:	80 83       	st	Z, r24
loop():
D:\Workspace\ReprogramRobotics\Firmware\Test Firmware\sdmd_serial_check/sdmd_serial_check.ino:5
void setup() {
  Serial.begin(9600);
}
void loop() {
  if (Serial.available()) {
 67a:	82 e1       	ldi	r24, 0x12	; 18
 67c:	91 e0       	ldi	r25, 0x01	; 1
 67e:	0e 94 7d 01 	call	0x2fa	; 0x2fa <HardwareSerial::available()>
 682:	89 2b       	or	r24, r25
 684:	41 f0       	breq	.+16     	; 0x696 <main+0xe0>
D:\Workspace\ReprogramRobotics\Firmware\Test Firmware\sdmd_serial_check/sdmd_serial_check.ino:6
    digitalWrite(5, 1);
 686:	61 e0       	ldi	r22, 0x01	; 1
 688:	85 e0       	ldi	r24, 0x05	; 5
 68a:	0e 94 b4 00 	call	0x168	; 0x168 <digitalWrite>
D:\Workspace\ReprogramRobotics\Firmware\Test Firmware\sdmd_serial_check/sdmd_serial_check.ino:7
    digitalWrite(6, 0);
 68e:	60 e0       	ldi	r22, 0x00	; 0
 690:	86 e0       	ldi	r24, 0x06	; 6
 692:	0e 94 b4 00 	call	0x168	; 0x168 <digitalWrite>
main():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 696:	0e 94 22 02 	call	0x444	; 0x444 <serialEventRun()>
 69a:	ef cf       	rjmp	.-34     	; 0x67a <main+0xc4>

0000069c <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC2Ev():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 69c:	e2 e1       	ldi	r30, 0x12	; 18
 69e:	f1 e0       	ldi	r31, 0x01	; 1
 6a0:	13 82       	std	Z+3, r1	; 0x03
 6a2:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC2Ev():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 6a4:	88 ee       	ldi	r24, 0xE8	; 232
 6a6:	93 e0       	ldi	r25, 0x03	; 3
 6a8:	a0 e0       	ldi	r26, 0x00	; 0
 6aa:	b0 e0       	ldi	r27, 0x00	; 0
 6ac:	84 83       	std	Z+4, r24	; 0x04
 6ae:	95 83       	std	Z+5, r25	; 0x05
 6b0:	a6 83       	std	Z+6, r26	; 0x06
 6b2:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC2EPVhS1_S1_S1_S1_S1_():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial_private.h:92
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
 6b4:	84 e0       	ldi	r24, 0x04	; 4
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	91 83       	std	Z+1, r25	; 0x01
 6ba:	80 83       	st	Z, r24
 6bc:	85 ec       	ldi	r24, 0xC5	; 197
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	95 87       	std	Z+13, r25	; 0x0d
 6c2:	84 87       	std	Z+12, r24	; 0x0c
 6c4:	84 ec       	ldi	r24, 0xC4	; 196
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	97 87       	std	Z+15, r25	; 0x0f
 6ca:	86 87       	std	Z+14, r24	; 0x0e
 6cc:	80 ec       	ldi	r24, 0xC0	; 192
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	91 8b       	std	Z+17, r25	; 0x11
 6d2:	80 8b       	std	Z+16, r24	; 0x10
 6d4:	81 ec       	ldi	r24, 0xC1	; 193
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	93 8b       	std	Z+19, r25	; 0x13
 6da:	82 8b       	std	Z+18, r24	; 0x12
 6dc:	82 ec       	ldi	r24, 0xC2	; 194
 6de:	90 e0       	ldi	r25, 0x00	; 0
 6e0:	95 8b       	std	Z+21, r25	; 0x15
 6e2:	84 8b       	std	Z+20, r24	; 0x14
 6e4:	86 ec       	ldi	r24, 0xC6	; 198
 6e6:	90 e0       	ldi	r25, 0x00	; 0
 6e8:	97 8b       	std	Z+23, r25	; 0x17
 6ea:	86 8b       	std	Z+22, r24	; 0x16
 6ec:	11 8e       	std	Z+25, r1	; 0x19
 6ee:	12 8e       	std	Z+26, r1	; 0x1a
 6f0:	13 8e       	std	Z+27, r1	; 0x1b
 6f2:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\icech\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.1.1\cores\MCUdude_corefiles/HardwareSerial0.cpp:77

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
}
 6f4:	08 95       	ret

000006f6 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
 6f6:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
 6f8:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
 6fa:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
 6fc:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
 6fe:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
 700:	09 94       	ijmp

00000702 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 702:	f8 94       	cli

00000704 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 704:	ff cf       	rjmp	.-2      	; 0x704 <__stop_program>
